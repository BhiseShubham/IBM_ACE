

CREATE COMPUTE MODULE Timer_MF_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.TimeoutRequest.Action='SET';
		SET OutputLocalEnvironment.TimeoutRequest.Identifier='Unique1';
		SET OutputLocalEnvironment.TimeoutRequest.StartDate='TODAY';
		SET OutputLocalEnvironment.TimeoutRequest.StartTime='16:07:00';
		SET OutputLocalEnvironment.TimeoutRequest.Interval=20;
		SET OutputLocalEnvironment.TimeoutRequest.Count=5;
		SET OutputLocalEnvironment.TimeoutRequest.IgnoreMissed=TRUE;
		SET OutputLocalEnvironment.TimeoutRequest.AllowOverwrite=TRUE;
		--SET OutputLocalEnvironment.TimeoutRequest.IgnoreMissed=TRUE;

--This line sets the property IgnoreMissed of the TimeoutRequest in the OutputLocalEnvironment to TRUE. This means that
 --if the timeout-controlled node or flow has missed a timeout, it should ignore it and continue processing without raising an exception.
 
-- 
-- SET OutputLocalEnvironment.TimeoutRequest.AllowOverwrite=TRUE;
--
--This line sets the property AllowOverwrite of the TimeoutRequest in the OutputLocalEnvironment to TRUE. 
--This allows the timeout request to overwrite any existing timeout request for the same message if one exists. 
--	Without this setting, attempting to set a new timeout for a message that already has one could result in an error.
	END;
END MODULE;
